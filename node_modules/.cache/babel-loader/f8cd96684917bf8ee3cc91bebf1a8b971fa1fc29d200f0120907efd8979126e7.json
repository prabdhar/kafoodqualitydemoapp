{"ast":null,"code":"// Photo storage utility for inspection photos\nimport{v4 as uuidv4}from'uuid';// Create inspectPhotos directory path\nconst INSPECT_PHOTOS_DIR='./inspectPhotos';// Utility to generate unique filename\nexport const generatePhotoFilename=originalName=>{const timestamp=new Date().toISOString().replace(/[:.]/g,'-');const uuid=uuidv4().substring(0,8);const extension=originalName.split('.').pop();return\"\".concat(timestamp,\"_\").concat(uuid,\".\").concat(extension);};// Save photo to local inspectPhotos directory\nexport const savePhotoToLocal=async(file,schoolId,inspectionId)=>{try{// Generate unique filename\nconst filename=generatePhotoFilename(file.name);// Create directory structure: inspectPhotos/schoolId/inspectionId/\nconst relativePath=\"inspectPhotos/school_\".concat(schoolId,\"/inspection_\").concat(inspectionId,\"/\").concat(filename);// In a real application, you would use Node.js fs module or a file upload service\n// For now, we'll simulate the file save and return the path\n// Convert file to base64 for storage simulation\nconst reader=new FileReader();return new Promise((resolve,reject)=>{reader.onload=()=>{// Simulate saving to local storage\nconst photoData={id:uuidv4(),filename:filename,originalName:file.name,path:relativePath,size:file.size,type:file.type,data:reader.result,// base64 data\nuploadDate:new Date().toISOString(),schoolId:schoolId,inspectionId:inspectionId};// Store in localStorage for demo purposes\n// In production, this would be saved to actual file system\nconst existingPhotos=JSON.parse(localStorage.getItem('inspectionPhotos')||'[]');existingPhotos.push(photoData);localStorage.setItem('inspectionPhotos',JSON.stringify(existingPhotos));resolve({id:photoData.id,path:relativePath,filename:filename,originalName:file.name,size:file.size,url:reader.result// For preview purposes\n});};reader.onerror=reject;reader.readAsDataURL(file);});}catch(error){console.error('Error saving photo:',error);throw error;}};// Get photo by path\nexport const getPhotoByPath=path=>{try{const existingPhotos=JSON.parse(localStorage.getItem('inspectionPhotos')||'[]');return existingPhotos.find(photo=>photo.path===path);}catch(error){console.error('Error retrieving photo:',error);return null;}};// Get all photos for a specific inspection\nexport const getInspectionPhotos=(schoolId,inspectionId)=>{try{const existingPhotos=JSON.parse(localStorage.getItem('inspectionPhotos')||'[]');return existingPhotos.filter(photo=>photo.schoolId===schoolId&&photo.inspectionId===inspectionId);}catch(error){console.error('Error retrieving inspection photos:',error);return[];}};// Delete photo by ID\nexport const deletePhoto=photoId=>{try{const existingPhotos=JSON.parse(localStorage.getItem('inspectionPhotos')||'[]');const updatedPhotos=existingPhotos.filter(photo=>photo.id!==photoId);localStorage.setItem('inspectionPhotos',JSON.stringify(updatedPhotos));return true;}catch(error){console.error('Error deleting photo:',error);return false;}};// Create directory structure (simulation)\nexport const ensureDirectoryExists=(schoolId,inspectionId)=>{// In a real application, this would create actual directories\n// For demo purposes, we'll just return the path structure\nreturn\"inspectPhotos/school_\".concat(schoolId,\"/inspection_\").concat(inspectionId,\"/\");};","map":{"version":3,"names":["v4","uuidv4","INSPECT_PHOTOS_DIR","generatePhotoFilename","originalName","timestamp","Date","toISOString","replace","uuid","substring","extension","split","pop","concat","savePhotoToLocal","file","schoolId","inspectionId","filename","name","relativePath","reader","FileReader","Promise","resolve","reject","onload","photoData","id","path","size","type","data","result","uploadDate","existingPhotos","JSON","parse","localStorage","getItem","push","setItem","stringify","url","onerror","readAsDataURL","error","console","getPhotoByPath","find","photo","getInspectionPhotos","filter","deletePhoto","photoId","updatedPhotos","ensureDirectoryExists"],"sources":["/Users/prabdhar/CascadeProjects/windsurf-project/src/utils/photoStorage.js"],"sourcesContent":["// Photo storage utility for inspection photos\nimport { v4 as uuidv4 } from 'uuid';\n\n// Create inspectPhotos directory path\nconst INSPECT_PHOTOS_DIR = './inspectPhotos';\n\n// Utility to generate unique filename\nexport const generatePhotoFilename = (originalName) => {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const uuid = uuidv4().substring(0, 8);\n  const extension = originalName.split('.').pop();\n  return `${timestamp}_${uuid}.${extension}`;\n};\n\n// Save photo to local inspectPhotos directory\nexport const savePhotoToLocal = async (file, schoolId, inspectionId) => {\n  try {\n    // Generate unique filename\n    const filename = generatePhotoFilename(file.name);\n    \n    // Create directory structure: inspectPhotos/schoolId/inspectionId/\n    const relativePath = `inspectPhotos/school_${schoolId}/inspection_${inspectionId}/${filename}`;\n    \n    // In a real application, you would use Node.js fs module or a file upload service\n    // For now, we'll simulate the file save and return the path\n    \n    // Convert file to base64 for storage simulation\n    const reader = new FileReader();\n    \n    return new Promise((resolve, reject) => {\n      reader.onload = () => {\n        // Simulate saving to local storage\n        const photoData = {\n          id: uuidv4(),\n          filename: filename,\n          originalName: file.name,\n          path: relativePath,\n          size: file.size,\n          type: file.type,\n          data: reader.result, // base64 data\n          uploadDate: new Date().toISOString(),\n          schoolId: schoolId,\n          inspectionId: inspectionId\n        };\n        \n        // Store in localStorage for demo purposes\n        // In production, this would be saved to actual file system\n        const existingPhotos = JSON.parse(localStorage.getItem('inspectionPhotos') || '[]');\n        existingPhotos.push(photoData);\n        localStorage.setItem('inspectionPhotos', JSON.stringify(existingPhotos));\n        \n        resolve({\n          id: photoData.id,\n          path: relativePath,\n          filename: filename,\n          originalName: file.name,\n          size: file.size,\n          url: reader.result // For preview purposes\n        });\n      };\n      \n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  } catch (error) {\n    console.error('Error saving photo:', error);\n    throw error;\n  }\n};\n\n// Get photo by path\nexport const getPhotoByPath = (path) => {\n  try {\n    const existingPhotos = JSON.parse(localStorage.getItem('inspectionPhotos') || '[]');\n    return existingPhotos.find(photo => photo.path === path);\n  } catch (error) {\n    console.error('Error retrieving photo:', error);\n    return null;\n  }\n};\n\n// Get all photos for a specific inspection\nexport const getInspectionPhotos = (schoolId, inspectionId) => {\n  try {\n    const existingPhotos = JSON.parse(localStorage.getItem('inspectionPhotos') || '[]');\n    return existingPhotos.filter(photo => \n      photo.schoolId === schoolId && photo.inspectionId === inspectionId\n    );\n  } catch (error) {\n    console.error('Error retrieving inspection photos:', error);\n    return [];\n  }\n};\n\n// Delete photo by ID\nexport const deletePhoto = (photoId) => {\n  try {\n    const existingPhotos = JSON.parse(localStorage.getItem('inspectionPhotos') || '[]');\n    const updatedPhotos = existingPhotos.filter(photo => photo.id !== photoId);\n    localStorage.setItem('inspectionPhotos', JSON.stringify(updatedPhotos));\n    return true;\n  } catch (error) {\n    console.error('Error deleting photo:', error);\n    return false;\n  }\n};\n\n// Create directory structure (simulation)\nexport const ensureDirectoryExists = (schoolId, inspectionId) => {\n  // In a real application, this would create actual directories\n  // For demo purposes, we'll just return the path structure\n  return `inspectPhotos/school_${schoolId}/inspection_${inspectionId}/`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}