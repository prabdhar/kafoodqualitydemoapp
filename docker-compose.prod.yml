version: '3.8'

services:
  # Food Transparency Portal - Production with SSL
  food-transparency-portal:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: food-transparency-portal-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    volumes:
      - inspection_photos:/usr/share/nginx/html/inspectPhotos
      - ./logs:/var/log/nginx
    networks:
      - food-portal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.food-portal.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.food-portal.tls=true"
      - "traefik.http.routers.food-portal.tls.certresolver=letsencrypt"

  # Reverse Proxy with SSL
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./ssl-certs:/ssl-certs
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@your-domain.com
      - --certificatesresolvers.letsencrypt.acme.storage=/ssl-certs/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    networks:
      - food-portal-network

  # Database for future backend integration
  postgres:
    image: postgres:15-alpine
    container_name: food-portal-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: food_transparency
      POSTGRES_USER: portal_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - food-portal-network
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d food_transparency"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: food-portal-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - food-portal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - food-portal-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - food-portal-network
    secrets:
      - grafana_password

volumes:
  inspection_photos:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  food-portal-network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
